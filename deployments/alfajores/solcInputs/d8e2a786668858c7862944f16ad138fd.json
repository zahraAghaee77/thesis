{
  "language": "Solidity",
  "sources": {
    "contracts/RequirementEngineering.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\ncontract Reqiurement {\n    enum Stage {\n        Defined,\n        Refined,\n        Verified,\n        Validated,\n        Finished\n    }\n    enum Type {\n        Functional,\n        NonFunctional\n    }\n    enum Priority {\n        Low,\n        Medium,\n        High\n    }\n    enum Risk {\n        Low,\n        Medium,\n        High\n    }\n\n    uint256 id;\n    string name;\n    address creator;\n    address requirementEngineer;\n    address requirementAnalyst;\n    address manager;\n    string description;\n    bool verified;\n    bool validated;\n    Type typeOfIt;\n    Priority priority;\n    Risk risk;\n    Stage stage = Stage.Defined;\n\n    constructor(\n        uint256 _id,\n        string memory _name,\n        string memory _description,\n        address _creator,\n        address _manager\n    ) {\n        id = _id;\n        name = _name;\n        description = _description;\n        creator = _creator;\n        manager = _manager;\n        verified = false;\n        validated = false;\n        stage = Stage.Refined;\n    }\n\n    modifier rightRange(uint256 max, uint256 range) {\n        require(range < max, \"Bad range.\");\n        _;\n    }\n    modifier rightStage(uint256 correctStage) {\n        require(getStage() == correctStage, \"Incorrect Stage!\");\n        _;\n    }\n    modifier onlyUnverified() {\n        require(!verified, \"It has been verified.\");\n        _;\n    }\n\n    modifier onlyUnvalidated() {\n        require(!validated, \"It has been validated.\");\n        _;\n    }\n\n    function validate() public onlyUnvalidated rightStage(3) {\n        validated = true;\n    }\n\n    function verify() public onlyUnverified rightStage(2) {\n        verified = true;\n    }\n\n    function isVerified() public view returns (bool) {\n        return verified;\n    }\n\n    function isValidate() public view returns (bool) {\n        return validated;\n    }\n\n    function getName() public view returns (string memory) {\n        return name;\n    }\n\n    function getDescription() public view returns (string memory) {\n        return description;\n    }\n\n    function getCreator() public view returns (address) {\n        return creator;\n    }\n\n    function getId() public view returns (uint256) {\n        return id;\n    }\n\n    function getType() public view returns (uint256) {\n        return uint256(typeOfIt);\n    }\n\n    function getPriority() public view returns (uint256) {\n        return uint256(priority);\n    }\n\n    function getRisk() public view returns (uint256) {\n        return uint256(risk);\n    }\n\n    function getStage() public view returns (uint256) {\n        return uint256(stage);\n    }\n\n    function setType(\n        uint256 _typeOfIt\n    ) public rightRange(2, _typeOfIt) rightStage(1) {\n        if (_typeOfIt == 0) {\n            typeOfIt = Type.Functional;\n        } else {\n            typeOfIt = Type.NonFunctional;\n        }\n    }\n\n    function typeToString() public view returns (string memory) {\n        if (typeOfIt == Type.Functional) {\n            return \"functional\";\n        } else {\n            return \"Non-Functional\";\n        }\n    }\n\n    function setPriority(\n        uint256 _priority\n    ) public rightRange(3, _priority) rightStage(1) {\n        if (_priority == 0) {\n            priority = Priority.Low;\n        } else if (_priority == 1) {\n            priority = Priority.Medium;\n        } else {\n            priority = Priority.High;\n        }\n    }\n\n    function priorityToString() public view returns (string memory) {\n        if (priority == Priority.Low) {\n            return \"low\";\n        } else if (priority == Priority.Medium) {\n            return \"medium\";\n        } else {\n            return \"high\";\n        }\n    }\n\n    function setRisk(uint256 _risk) public rightRange(3, _risk) rightStage(1) {\n        if (_risk == 0) {\n            risk = Risk.Low;\n        } else if (_risk == 1) {\n            risk = Risk.Medium;\n        } else {\n            risk = Risk.High;\n        }\n    }\n\n    function riskToString() public view returns (string memory) {\n        if (risk == Risk.Low) {\n            return \"low\";\n        } else if (risk == Risk.Medium) {\n            return \"medium\";\n        } else {\n            return \"high\";\n        }\n    }\n\n    function setStage(uint256 _stage) public rightRange(5, _stage) {\n        if (_stage == 0) {\n            stage = Stage.Defined;\n        } else if (_stage == 1) {\n            stage = Stage.Refined;\n        } else if (_stage == 2) {\n            stage = Stage.Verified;\n        } else if (_stage == 3) {\n            stage = Stage.Validated;\n        } else {\n            stage = Stage.Finished;\n        }\n    }\n\n    function stageToString() public view returns (string memory) {\n        if (stage == Stage.Defined) {\n            return \"defined\";\n        } else if (stage == Stage.Refined) {\n            return \"refined\";\n        } else if (stage == Stage.Verified) {\n            return \"verified\";\n        } else if (stage == Stage.Validated) {\n            return \"Validated\";\n        } else {\n            return \"finished\";\n        }\n    }\n\n    function setDescription(string memory _description) public rightStage(1) {\n        description = _description;\n    }\n\n    function setRequirementEngineer(address _reqEngineer) public {\n        requirementEngineer = _reqEngineer;\n    }\n\n    function setRequirementAnalyst(address _reqAnalyst) public {\n        requirementAnalyst = _reqAnalyst;\n    }\n\n    function toString(address account) public pure returns (string memory) {\n        return toString(abi.encodePacked(account));\n    }\n\n    function toString(uint256 value) public pure returns (string memory) {\n        return toString(abi.encodePacked(value));\n    }\n\n    function toString(bytes32 value) public pure returns (string memory) {\n        return toString(abi.encodePacked(value));\n    }\n\n    function toString(bool value) public pure returns (string memory) {\n        if (value) {\n            return \"true\";\n        } else {\n            return \"false\";\n        }\n    }\n\n    function toString(bytes memory data) public pure returns (string memory) {\n        bytes memory alphabet = \"0123456789abcdef\";\n\n        bytes memory str = new bytes(2 + data.length * 2);\n        str[0] = \"0\";\n        str[1] = \"x\";\n        for (uint256 i = 0; i < data.length; i++) {\n            str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\n            str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\n        }\n        return string(str);\n    }\n\n    function seeReq1() public view returns (string memory) {\n        string memory id_str = toString(id);\n        id_str = string.concat(\"id: \", id_str, \" , \");\n\n        string memory name_str = string.concat(\"name: \", name, \" , \");\n\n        string memory des_str = string.concat(\n            \"description: \",\n            description,\n            \" , \"\n        );\n\n        string memory validated_str = toString(validated);\n        validated_str = string.concat(\"validated: \", validated_str, \" , \");\n\n        string memory verified_str = toString(verified);\n        verified_str = string.concat(\"verified: \", verified_str, \" , \");\n\n        return\n            string.concat(\n                id_str,\n                name_str,\n                des_str,\n                verified_str,\n                validated_str\n            );\n    }\n\n    function seeReq2() public view returns (string memory) {\n        string memory typeOfIt_str = typeToString();\n        typeOfIt_str = string.concat(\"type: \", typeOfIt_str, \" , \");\n\n        string memory priority_str = priorityToString();\n        priority_str = string.concat(\"priority: \", priority_str, \" , \");\n\n        string memory risk_str = riskToString();\n        risk_str = string.concat(\"risk: \", risk_str, \" , \");\n\n        string memory stage_str = stageToString();\n        stage_str = string.concat(\"stage: \", stage_str, \" , \");\n\n        return string.concat(typeOfIt_str, priority_str, risk_str, stage_str);\n    }\n\n    function seeReq3() public view returns (string memory) {\n        string memory creator_str = toString(creator);\n        creator_str = string.concat(\"creator: \", creator_str, \" , \");\n\n        string memory requirementEngineer_str = toString(requirementEngineer);\n        requirementEngineer_str = string.concat(\n            \"requirement engineer: \",\n            requirementEngineer_str,\n            \" , \"\n        );\n\n        string memory requirementAnalyst_str = toString(requirementAnalyst);\n        requirementAnalyst_str = string.concat(\n            \"requirement analyst: \",\n            requirementAnalyst_str,\n            \" , \"\n        );\n\n        string memory manager_str = toString(manager);\n        manager_str = string.concat(\"manager: \", manager_str, \" , \");\n\n        return\n            string.concat(\n                creator_str,\n                requirementEngineer_str,\n                requirementAnalyst_str,\n                manager_str\n            );\n    }\n\n    function seeReq() public view returns (string memory) {\n        string memory a = seeReq1();\n        string memory b = seeReq2();\n        string memory c = seeReq3();\n        return string.concat(a, b, c);\n    }\n}\n\ncontract RequirementEngineering {\n    uint256 numbersOfReqiurements;\n    Reqiurement[] requirements;\n    mapping(uint256 => bool) public availableRequirements;\n    address public manager;\n    address[] public requirementEngineers;\n    mapping(address => bool) public availableRequirementEngineers;\n    address[] public requirementAnalysts;\n    mapping(address => bool) public availableRequirementAnalyst;\n\n    constructor() {\n        manager = msg.sender;\n        numbersOfReqiurements = 0;\n    }\n\n    modifier onlyByManager() {\n        require(msg.sender == manager, \"Only by manager.\");\n        _;\n    }\n\n    modifier onlyByrequirementEngineer() {\n        require(\n            availableRequirementEngineers[msg.sender],\n            \"Only by Requirement Engineers\"\n        );\n        _;\n    }\n\n    modifier onlyByrequirementAnalyst() {\n        require(\n            availableRequirementAnalyst[msg.sender],\n            \"Only by Requirement Analysts\"\n        );\n        _;\n    }\n\n    modifier isNewRequirementEngineer(address _reqEngineer) {\n        require(\n            !availableRequirementEngineers[_reqEngineer],\n            \"This Requirement Engineer has already existed!\"\n        );\n        _;\n    }\n\n    modifier isNewRequirementAnalyst(address _reqAnalyst) {\n        require(\n            !availableRequirementAnalyst[_reqAnalyst],\n            \"This Requirement Analyst has already existed!\"\n        );\n        _;\n    }\n\n    modifier isAvailable(uint256 _reqNumber) {\n        require(contains(_reqNumber), \"Not available.\");\n        _;\n    }\n\n    function getManager() public view returns (address) {\n        return manager;\n    }\n\n    function isRequirementEngineer(address rqEn) public view returns (bool) {\n        return availableRequirementEngineers[rqEn];\n    }\n\n    function isRequirementAnalyst(address rqAn) public view returns (bool) {\n        return availableRequirementAnalyst[rqAn];\n    }\n\n    function addRequirementEngineer(\n        address _reqEngineer\n    ) public onlyByManager isNewRequirementEngineer(_reqEngineer) {\n        requirementEngineers.push(_reqEngineer);\n        availableRequirementEngineers[_reqEngineer] = true;\n    }\n\n    function addRequirementAnalyst(\n        address _reqAnalyst\n    ) public onlyByManager isNewRequirementAnalyst(_reqAnalyst) {\n        requirementAnalysts.push(_reqAnalyst);\n        availableRequirementAnalyst[_reqAnalyst] = true;\n    }\n\n    function addRequirement(\n        string memory _name,\n        string memory _description\n    ) public {\n        Reqiurement req = new Reqiurement(\n            numbersOfReqiurements,\n            _name,\n            _description,\n            msg.sender,\n            manager\n        );\n        requirements.push(req);\n        availableRequirements[numbersOfReqiurements] = true;\n        numbersOfReqiurements++;\n    }\n\n    function changeDescriptionOfRequirement(\n        uint256 _reqNumber,\n        string memory _description\n    ) internal onlyByrequirementEngineer isAvailable(_reqNumber) {\n        (uint256 index, ) = indexOf(_reqNumber);\n        requirements[index].setDescription(_description);\n    }\n\n    function changePriority(\n        uint256 _reqNumber,\n        uint256 _priority\n    ) internal onlyByrequirementEngineer isAvailable(_reqNumber) {\n        (uint256 index, ) = indexOf(_reqNumber);\n        requirements[index].setPriority(_priority);\n    }\n\n    function changeType(\n        uint256 _reqNumber,\n        uint256 _type\n    ) internal onlyByrequirementEngineer isAvailable(_reqNumber) {\n        (uint256 index, ) = indexOf(_reqNumber);\n        requirements[index].setType(_type);\n        requirements[index].setRequirementEngineer(msg.sender);\n    }\n\n    function changeRisk(\n        uint256 _reqNumber,\n        uint256 _risk\n    ) internal onlyByrequirementEngineer isAvailable(_reqNumber) {\n        (uint256 index, ) = indexOf(_reqNumber);\n        requirements[index].setRisk(_risk);\n    }\n\n    function refine(\n        uint256 _reqNumber,\n        string memory _description,\n        uint256 _priority,\n        uint256 _type,\n        uint256 _risk\n    ) public onlyByrequirementEngineer isAvailable(_reqNumber) {\n        changeDescriptionOfRequirement(_reqNumber, _description);\n        changePriority(_reqNumber, _priority);\n        changeType(_reqNumber, _type);\n        changeRisk(_reqNumber, _risk);\n        (uint256 index, ) = indexOf(_reqNumber);\n        requirements[index].setStage(2);\n    }\n\n    function verify(\n        uint256 _reqNumber\n    ) public onlyByrequirementAnalyst isAvailable(_reqNumber) {\n        (uint256 index, ) = indexOf(_reqNumber);\n        requirements[index].verify();\n        requirements[index].setRequirementAnalyst(msg.sender);\n        requirements[index].setStage(3);\n    }\n\n    function validate(\n        uint256 _reqNumber\n    ) public onlyByrequirementAnalyst isAvailable(_reqNumber) {\n        (uint256 index, ) = indexOf(_reqNumber);\n        requirements[index].validate();\n        requirements[index].setRequirementAnalyst(msg.sender);\n        requirements[index].setStage(4);\n    }\n\n    function removeRequirement(\n        uint256 _reqNumber\n    ) public onlyByManager isAvailable(_reqNumber) {\n        (uint256 index, ) = indexOf(_reqNumber);\n        remove(index);\n    }\n\n    function indexOf(uint256 _reqNumber) public view returns (uint256, bool) {\n        uint256 length = requirements.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (requirements[i].getId() == _reqNumber) {\n                return (i, true);\n            }\n        }\n        return (0, false);\n    }\n\n    function contains(uint256 _reqNumber) public view returns (bool) {\n        (, bool isIn) = indexOf(_reqNumber);\n        return isIn;\n    }\n\n    function remove(uint256 index) internal returns (uint256) {\n        uint256 length = requirements.length;\n        if (index >= length) {\n            revert(\"Error: index out of bounds\");\n        }\n        uint256 entry = requirements[index].getId();\n        for (uint256 i = index; i < length - 1; i++) {\n            requirements[i] = requirements[i + 1];\n        }\n        requirements.pop();\n        return (entry);\n    }\n\n    function seeReq(uint _reqNumber) public view returns (string memory) {\n        (uint256 index, ) = indexOf(_reqNumber);\n        return requirements[index].seeReq();\n    }\n\n    function seeAllReq() public view returns (string memory) {\n        uint256 length = requirements.length;\n        string memory a = \"\";\n        for (uint256 i = 0; i < length; i++) {\n            string memory temp = requirements[i].seeReq();\n            a = string.concat(a, \" ... \", temp);\n        }\n        return a;\n    }\n\n    function isRequirement(uint _reqNumber) public view returns (bool) {\n        return availableRequirements[_reqNumber];\n    }\n\n    function getNumbersOfReqiurements() public view returns (uint256) {\n        return numbersOfReqiurements;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}