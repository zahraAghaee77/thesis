{
  "language": "Solidity",
  "sources": {
    "contracts/RequirementEngineering.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\n/**\n * @title BytesToString\n * @dev Bytes operations to convert to string and remove null characters\n */\n\ncontract Reqiurement {\n\tenum Stage {\n\t\tDefined,\n\t\tRefined,\n\t\tVerified,\n\t\tValidated,\n\t\tFinished\n\t}\n\tenum Type {\n\t\tFunctional,\n\t\tNonFunctional\n\t}\n\tenum Priority {\n\t\tLow,\n\t\tMedium,\n\t\tHigh\n\t}\n\tenum Risk {\n\t\tLow,\n\t\tMedium,\n\t\tHigh\n\t}\n\n\tuint256 id;\n\tstring name;\n\taddress creator;\n\taddress requirementEngineer;\n\taddress requirementAnalyst;\n\taddress manager;\n\tstring description;\n\tbool verified;\n\tbool validated;\n\tType typeOfIt;\n\tPriority priority;\n\tRisk risk;\n\tStage stage = Stage.Defined;\n\n\tconstructor(\n\t\tuint256 _id,\n\t\tstring memory _name,\n\t\tstring memory _description,\n\t\taddress _creator,\n\t\taddress _manager\n\t) {\n\t\tid = _id;\n\t\tname = _name;\n\t\tdescription = _description;\n\t\tcreator = _creator;\n\t\tmanager = _manager;\n\t\tverified = false;\n\t\tvalidated = false;\n\t\tstage = Stage.Refined;\n\t}\n\n\tmodifier rightRange(uint256 max, uint256 range) {\n\t\trequire(range < max, \"Bad range.\");\n\t\t_;\n\t}\n\tmodifier rightStage(uint256 correctStage){\n\t\trequire(getStage() == correctStage, \"Incorrect Stage!\");\n\t\t_;\n\t}\n\tmodifier onlyUnverified() {\n\t\trequire(!verified, \"It has been verified.\");\n\t\t_;\n\t}\n\n\tmodifier onlyUnvalidated() {\n\t\trequire(!validated, \"It has been validated.\");\n\t\t_;\n\t}\n\n\tfunction validate() public onlyUnvalidated rightStage(3) {\n\t\tvalidated = true;\n\t}\n\n\tfunction verify() public onlyUnverified rightStage(2){\n\t\tverified = true;\n\t}\n\n\tfunction isVerified() public view returns (bool) {\n\t\treturn verified;\n\t}\n\n\tfunction isValidate() public view returns (bool) {\n\t\treturn validated;\n\t}\n\n\tfunction getName() public view returns (string memory) {\n\t\treturn name;\n\t}\n\n\tfunction getDescription() public view returns (string memory) {\n\t\treturn description;\n\t}\n\n\tfunction getCreator() public view returns (address) {\n\t\treturn creator;\n\t}\n\n\tfunction getId() public view returns (uint256) {\n\t\treturn id;\n\t}\n\n\tfunction getType() public view returns (uint256) {\n\t\treturn uint256(typeOfIt);\n\t}\n\n\tfunction getPriority() public view returns (uint256) {\n\t\treturn uint256(priority);\n\t}\n\n\tfunction getRisk() public view returns (uint256) {\n\t\treturn uint256(risk);\n\t}\n\n\tfunction getStage() public view returns (uint256){\n\t\treturn uint256(stage);\n\t}\n\n\tfunction setType(uint256 _typeOfIt) public rightRange(2, _typeOfIt) rightStage(1){\n\t\tif (_typeOfIt == 0) {\n\t\t\ttypeOfIt = Type.Functional;\n\t\t} else {\n\t\t\ttypeOfIt = Type.NonFunctional;\n\t\t}\n\t}\n\n\tfunction typeToString() public view  returns(string memory){\n\t\tif(typeOfIt == Type.Functional){\n\t\t\treturn \"functional\";\n\t\t}else {\n\t\t\treturn \"Non-Functional\";\n\t\t}\n\t}\n\n\tfunction setPriority(uint256 _priority) public rightRange(3, _priority) rightStage(1){\n\t\tif (_priority == 0) {\n\t\t\tpriority = Priority.Low;\n\t\t} else if (_priority == 1) {\n\t\t\tpriority = Priority.Medium;\n\t\t} else {\n\t\t\tpriority = Priority.High;\n\t\t}\n\t}\n\n\tfunction priorityToString() public view  returns(string memory){\n\t\tif(priority == Priority.Low){\n\t\t\treturn \"low\";\n\t\t}else if(priority == Priority.Medium){\n\t\t\treturn \"medium\";\n\t\t}else {\n\t\t\treturn \"high\";\n\t\t}\n\t}\n\n\tfunction setRisk(uint256 _risk) public rightRange(3, _risk) rightStage(1){\n\t\tif (_risk == 0) {\n\t\t\trisk = Risk.Low;\n\t\t} else if (_risk == 1) {\n\t\t\trisk = Risk.Medium;\n\t\t} else {\n\t\t\trisk = Risk.High;\n\t\t}\n\t}\n\n\tfunction riskToString() public view  returns(string memory){\n\t\tif(risk == Risk.Low){\n\t\t\treturn \"low\";\n\t\t}else if(risk == Risk.Medium){\n\t\t\treturn \"medium\";\n\t\t}else {\n\t\t\treturn \"high\";\n\t\t}\n\t}\n\n\tfunction setStage(uint256 _stage) public rightRange(5, _stage){\n\t\tif(_stage == 0){\n\t\t\tstage = Stage.Defined;\n\t\t}else if(_stage == 1){\n\t\t\tstage = Stage.Refined;\n\t\t}else if(_stage == 2){\n\t\t\tstage = Stage.Verified;\n\t\t}else if(_stage == 3){\n\t\t\tstage = Stage.Validated;\n\t\t}else{\n\t\t\tstage = Stage.Finished;\n\t\t}\n\t}\n\n\tfunction stageToString() public view returns (string memory){\n\t\tif(stage == Stage.Defined){\n\t\t\treturn \"defined\";\n\t\t}else if(stage == Stage.Refined){\n\t\t\treturn \"refined\";\n\t\t}else if(stage == Stage.Verified){\n\t\t\treturn \"verified\";\n\t\t}else if(stage == Stage.Validated){\n\t\t\treturn \"Validated\";\n\t\t}else{\n\t\t\treturn \"finished\";\n\t\t}\n\t}\n\n\tfunction setDescription(string memory _description) public rightStage(1){\n\t\tdescription = _description;\n\t}\n\n\tfunction setRequirementEngineer(address _reqEngineer) public {\n\t\trequirementEngineer = _reqEngineer;\n\t}\n\n\tfunction setRequirementAnalyst(address _reqAnalyst) public {\n\t\trequirementAnalyst = _reqAnalyst;\n\t}\n\n\tfunction toString(address account) public pure returns (string memory) {\n\t\treturn toString(abi.encodePacked(account));\n\t}\n\n\tfunction toString(uint256 value) public pure returns (string memory) {\n\t\treturn toString(abi.encodePacked(value));\n\t}\n\n\tfunction toString(bytes32 value) public pure returns (string memory) {\n\t\treturn toString(abi.encodePacked(value));\n\t}\n\tfunction toString(bool value) public pure returns (string memory){\n\t\tif(value){\n\t\t\treturn \"true\";\n\t\t}else{ \n\t\t\treturn \"false\";\n\t\t}\n\t}\n\n\tfunction toString(bytes memory data) public pure returns (string memory) {\n\t\tbytes memory alphabet = \"0123456789abcdef\";\n\n\t\tbytes memory str = new bytes(2 + data.length * 2);\n\t\tstr[0] = \"0\";\n\t\tstr[1] = \"x\";\n\t\tfor (uint256 i = 0; i < data.length; i++) {\n\t\t\tstr[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\n\t\t\tstr[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\n\t\t}\n\t\treturn string(str);\n\t}\n\n\tfunction seeUsers() public view returns (string memory) {\n\t\tstring memory a = toString(creator);\n\t\ta = string.concat(\"creator: \", a);\n\t\ta = string.concat(a, \" --- \");\n\t\tstring memory b = toString(requirementEngineer);\n\t\tb = string.concat(\"Requirement Engineer: \", b);\n\t\tb = string.concat(b, \" --- \");\n\t\tstring memory c = toString(requirementAnalyst);\n\t\tc = string.concat(\"Requirement Analyst: \", c);\n\t\treturn string.concat(a, b, c);\n\t}\n\n\tfunction seeReq1() public view returns (string memory){\n\t\tstring memory id_str = toString(id);\n\t\tid_str = string.concat(\"id: \", id_str, \" --- \");\n\n\t\tstring memory name_str = string.concat(\"name: \", name, \" --- \");\n\n\t\tstring memory des_str = string.concat(\"description: \", description, \" --- \");\n\n\t\tstring memory validated_str = toString(validated);\n\t\tvalidated_str = string.concat(\"validated: \", validated_str, \" --- \");\n\n\t\tstring memory verified_str = toString(verified);\n\t\tverified_str = string.concat(\"verified: \", verified_str, \" --- \");\n\n\t\treturn string.concat(id_str, name_str, des_str, verified_str, validated_str);\n\t}\n\n\tfunction seeReq2() public view returns (string memory){\n\t\tstring memory typeOfIt_str = typeToString();\n\t\ttypeOfIt_str = string.concat(\"type:\", typeOfIt_str, \" --- \");\n\n\t\tstring memory priority_str = priorityToString();\n\t\tpriority_str = string.concat(\"priority: \", priority_str, \" --- \");\n\n\t\tstring memory risk_str = riskToString();\n\t\trisk_str = string.concat(\"risk: \", risk_str, \" --- \");\n\n\t\tstring memory stage_str = stageToString();\n\t\tstage_str = string.concat(\"stage: \", stage_str, \" --- \");\n\n\t\treturn string.concat(typeOfIt_str, priority_str, risk_str, stage_str);\n\t}\n\tfunction seeReq3() public view returns (string memory){\n\t\tstring memory creator_str = toString(creator);\n\t\tcreator_str = string.concat(\"creator: \", creator_str, \" --- \");\n\n\t\tstring memory requirementEngineer_str = toString(requirementEngineer);\n\t\trequirementEngineer_str = string.concat(\"requirement engineer: \", requirementEngineer_str, \" --- \");\n\n\t\tstring memory requirementAnalyst_str = toString(requirementAnalyst);\n\t\trequirementAnalyst_str = string.concat(\"requirement analyst: \", requirementAnalyst_str, \" --- \");\n\n\t\tstring memory manager_str = toString(manager);\n\t\tmanager_str = string.concat(\"manager: \", manager_str, \" --- \");\n\n\t\treturn string.concat(creator_str, requirementEngineer_str, requirementAnalyst_str, manager_str);\n\n\t}\n\n\tfunction seeReq() public view returns (string memory){\n\t\tstring memory a = seeReq1();\n\t\tstring memory b = seeReq2();\n\t\tstring memory c = seeReq3();\n\t\treturn string.concat(a, b, c);\n\n\t}\n}\n\ncontract RequirementEngineering {\n\tuint256 numbersOfReqiurements;\n\tReqiurement[] requirements;\n\tmapping(uint256 => bool) public availableRequirements;\n\taddress public manager;\n\taddress[] public requirementEngineers;\n\tmapping(address => bool) public availableRequirementEngineers;\n\taddress[] public requirementAnalysts;\n\tmapping(address => bool) public availableRequirementAnalyst;\n\n\tconstructor() {\n\t\tmanager = msg.sender;\n\t\tnumbersOfReqiurements = 0;\n\t}\n\n\tmodifier onlyByManager() {\n\t\trequire(msg.sender == manager, \"Only by manager.\");\n\t\t_;\n\t}\n\n\tmodifier onlyByrequirementEngineer() {\n\t\trequire(\n\t\t\tavailableRequirementEngineers[msg.sender],\n\t\t\t\"Only by Requirement Engineers\"\n\t\t);\n\t\t_;\n\t}\n\n\tmodifier onlyByrequirementAnalyst() {\n\t\trequire(\n\t\t\tavailableRequirementAnalyst[msg.sender],\n\t\t\t\"Only by Requirement Analysts\"\n\t\t);\n\t\t_;\n\t}\n\n\tmodifier isNewRequirementEngineer(address _reqEngineer) {\n\t\trequire(\n\t\t\t!availableRequirementEngineers[_reqEngineer],\n\t\t\t\"This Requirement Engineer has already existed!\"\n\t\t);\n\t\t_;\n\t}\n\n\tmodifier isNewRequirementAnalyst(address _reqAnalyst) {\n\t\trequire(\n\t\t\t!availableRequirementAnalyst[_reqAnalyst],\n\t\t\t\"This Requirement Analyst has already existed!\"\n\t\t);\n\t\t_;\n\t}\n\n\tmodifier isAvailable(uint256 _reqNumber) {\n\t\trequire(contains(_reqNumber), \"Not available.\");\n\t\t_;\n\t}\n\n\tfunction addRequirementEngineer(address _reqEngineer)\n\t\tpublic\n\t\tonlyByManager\n\t\tisNewRequirementEngineer(_reqEngineer)\n\t{\n\t\trequirementEngineers.push(_reqEngineer);\n\t\tavailableRequirementEngineers[_reqEngineer] = true;\n\t}\n\n\tfunction addRequirementAnalyst(address _reqAnalyst)\n\t\tpublic\n\t\tonlyByManager\n\t\tisNewRequirementAnalyst(_reqAnalyst)\n\t{\n\t\trequirementAnalysts.push(_reqAnalyst);\n\t\tavailableRequirementAnalyst[_reqAnalyst] = true;\n\t}\n\n\tfunction addRequirement(string memory _name, string memory _description)\n\t\tpublic\n\t{\n\t\tReqiurement req = new Reqiurement(\n\t\t\tnumbersOfReqiurements,\n\t\t\t_name,\n\t\t\t_description,\n\t\t\tmsg.sender,\n\t\t\tmanager\n\t\t);\n\t\trequirements.push(req);\n\t\tavailableRequirements[numbersOfReqiurements] = true;\n\t\tnumbersOfReqiurements++;\n\t}\n\n\tfunction changeDescriptionOfRequirement(\n\t\tuint256 _reqNumber,\n\t\tstring memory _description\n\t) internal onlyByrequirementEngineer isAvailable(_reqNumber) {\n\t\t(uint256 index, ) = indexOf(_reqNumber);\n\t\trequirements[index].setDescription(_description);\n\t}\n\n\tfunction changePriority(uint256 _reqNumber, uint256 _priority)\n\t\tinternal\n\t\tonlyByrequirementEngineer\n\t\tisAvailable(_reqNumber)\n\t{\n\t\t(uint256 index, ) = indexOf(_reqNumber);\n\t\trequirements[index].setPriority(_priority);\n\t}\n\n\tfunction changeType(uint256 _reqNumber, uint256 _type)\n\t\tinternal\n\t\tonlyByrequirementEngineer\n\t\tisAvailable(_reqNumber)\n\t{\n\t\t(uint256 index, ) = indexOf(_reqNumber);\n\t\trequirements[index].setType(_type);\n\t\trequirements[index].setRequirementEngineer(msg.sender);\n\t}\n\n\tfunction changeRisk(uint256 _reqNumber, uint256 _risk)\n\t\tinternal \n\t\tonlyByrequirementEngineer\n\t\tisAvailable(_reqNumber)\n\t{\n\t\t(uint256 index, ) = indexOf(_reqNumber);\n\t\trequirements[index].setRisk(_risk);\n\t}\n\n\tfunction refine(uint256 _reqNumber, string memory _description, uint256 _priority, uint256 _type, uint256 _risk) public onlyByrequirementEngineer isAvailable(_reqNumber){\n\t\tchangeDescriptionOfRequirement(_reqNumber, _description);\n\t\tchangePriority(_reqNumber, _priority);\n\t\tchangeType(_reqNumber, _type);\n\t\tchangeRisk(_reqNumber, _risk);\n\t\t(uint256 index, ) = indexOf(_reqNumber);\n\t\trequirements[index].setStage(2);\n\t}\n\n\tfunction verify(uint256 _reqNumber)\n\t\tpublic\n\t\tonlyByrequirementAnalyst\n\t\tisAvailable(_reqNumber)\n\t{\n\t\t(uint256 index, ) = indexOf(_reqNumber);\n\t\trequirements[index].verify();\n\t\trequirements[index].setRequirementAnalyst(msg.sender);\n\t\trequirements[index].setStage(3);\n\t}\n\n\tfunction validate(uint256 _reqNumber)\n\t\tpublic\n\t\tonlyByrequirementAnalyst\n\t\tisAvailable(_reqNumber)\n\t{\n\t\t(uint256 index, ) = indexOf(_reqNumber);\n\t\trequirements[index].validate();\n\t\trequirements[index].setRequirementAnalyst(msg.sender);\n\t\trequirements[index].setStage(4);\n\t}\n\n\tfunction removeRequirement(uint256 _reqNumber)\n\t\tpublic\n\t\tonlyByManager\n\t\tisAvailable(_reqNumber)\n\t{\n\t\t(uint256 index, ) = indexOf(_reqNumber);\n\t\tremove(index);\n\t}\n\n\tfunction seeReqUser(uint256 _reqNumber)\n\t\tpublic\n\t\tview\n\t\treturns (string memory)\n\t{\n\t\t(uint256 index, ) = indexOf(_reqNumber);\n\t\treturn requirements[index].seeUsers();\n\t}\n\n\tfunction indexOf(uint256 _reqNumber) public view returns (uint256, bool) {\n\t\tuint256 length = requirements.length;\n\t\tfor (uint256 i = 0; i < length; i++) {\n\t\t\tif (requirements[i].getId() == _reqNumber) {\n\t\t\t\treturn (i, true);\n\t\t\t}\n\t\t}\n\t\treturn (0, false);\n\t}\n\n\tfunction contains(uint256 _reqNumber) public view returns (bool) {\n\t\t(, bool isIn) = indexOf(_reqNumber);\n\t\treturn isIn;\n\t}\n\n\tfunction remove(uint256 index)\n\t\tinternal\n\t\treturns (uint256)\n\t{\n\t\tuint256 length = requirements.length;\n\t\tif (index >= length) {\n      \t\trevert(\"Error: index out of bounds\");\n    \t}\n\t\tuint256 entry = requirements[index].getId();\n\t\tfor (uint256 i = index; i < length - 1; i++) {\n\t\t\trequirements[i] = requirements[i+1];\n\t\t}\n  \t\trequirements.pop();\n\t\treturn (entry);\n\t}\n\tfunction seeReq (uint _reqNumber) public view returns (string memory){\n\t\t(uint256 index, ) = indexOf(_reqNumber);\n\t\treturn requirements[index].seeReq();\n\t}\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}